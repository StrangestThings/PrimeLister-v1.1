time=getTime();
print("\\Clear");

// 16GB-Ram: Not more than 100 Mio.

// Calculates about 0.7 sec per Million

bereich=100000;

A=newArray(bereich);


print("Array was created: " + IJ.freeMemory());

// Fill Array A with prime candidates
k=1;
for (i = 1; i < A.length; i=i+2) {A[i-1]=6*k-1; A[i]=6*k+1; k++;}
// *******************************************************

print("Array filled: " + IJ.freeMemory());

print(" Delete all the multiples of the single elements (E0, E2, E4...)"); 

for(i = 0; (7*i+10) < A.length; i=i+2){
while (A[i]<1){i=i+2;}
step=2*A[i];
for (j = 7*i+10; j < A.length; j=j+step) {A[j]=0;}
}

print(" Delete all the multiples of the single elements (E1, E3, E5...)"); 

for(i = 1; (3*i*i+8*i+4) < A.length; i=i+2){
while (A[i]<1){i=i+2;}
step=2*A[i];
for (j = 3*i*i+8*i+4; j < A.length; j=j+step) {A[j]=0;}
}

print(" Now delete all the remaining squares of the single elements (E0, E2, E4...)"); 

for (i = 0; (3*i*i+10*i+7) < A.length; i=i+2) {
if(A[3*i*i+10*i+7]>0){step=2*sqrt(A[3*i*i+10*i+7]); A[3*i*i+10*i+7]=0; for (j =(3*i*i+10*i+7); j < A.length; j=j+step) {A[j]=0;}}
}

// Delete Zeros

A=Array.deleteValue(A, 0);

// Attach 2 and 3
A=Array.concat(A,2);
A=Array.concat(A,3);

A=Array.sort(A);

time2=getTime();
zeit=(time2-time)/1000;

print("Range: " + bereich);
print("Primes identified: " + A.length);
print("Calculation time  [sec]: " + zeit);
print("Primes per second: " + A.length/zeit);


print("****************************************************");

results = getInfo("log");
results=replace(results,".",",");
print("\\Clear"); 
print(results); 

// Output of 100 primes per line with the according counter


spalten=100;

for (i = 0; i < A.length-spalten; i=i+spalten) {
line=toString((1+i) + "-" + (i+spalten) + ":" + "\t");
for (s = i; s < i+spalten; s++) {line=line+A[s]+"\t";}
print(line);
}

